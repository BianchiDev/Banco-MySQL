CREATE SCHEMA IF NOT EXISTS `sistema_academico` ;
USE `sistema_academico` ;

-- -----------------------------------------------------
-- Table `sistema_academico`.`curso`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistema_academico`.`curso` (
  `idcurso` INT NOT NULL,
  `nome_curso` VARCHAR(45) NOT NULL,
  `centro` VARCHAR(45) NULL,
  `forma_ingresso` VARCHAR(45) NULL,
  PRIMARY KEY (`idcurso`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_academico`.`aluno`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistema_academico`.`aluno` (
  `matricula` INT NOT NULL AUTO_INCREMENT,
  `data_entrada` DATE NOT NULL,
  `semestre` VARCHAR(45) NULL,
  `nome_aluno` VARCHAR(45) NOT NULL,
  `cpf` VARCHAR(45) NOT NULL,
  `rg` VARCHAR(45) NOT NULL,
  `logradouro` VARCHAR(45) NOT NULL,
  `numero` VARCHAR(45) NULL,
  `bairro` VARCHAR(45) NULL,
  `cidade` VARCHAR(45) NULL,
  `cep` VARCHAR(45) NULL,
  `uf` VARCHAR(45) NULL,
  `nome_responsavel` VARCHAR(45) NULL,
  `curso_idcurso` INT NOT NULL,
  PRIMARY KEY (`matricula`),
  INDEX `fk_aluno_curso1_idx` (`curso_idcurso` ASC),
  CONSTRAINT `fk_aluno_curso1`
    FOREIGN KEY (`curso_idcurso`)
    REFERENCES `sistema_academico`.`curso` (`idcurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_academico`.`disciplina_grade`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistema_academico`.`disciplina_grade` (
  `id_disciplina_grade` INT NOT NULL,
  `disciplina_grade_oferta` ENUM('s', 'n') NOT NULL,
  PRIMARY KEY (`id_disciplina_grade`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_academico`.`disciplina`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistema_academico`.`disciplina` (
  `iddisciplina` INT NOT NULL,
  `creditos` INT NOT NULL,
  `horas` INT NOT NULL,
  `responsavel` VARCHAR(45) NULL,
  `atitudinais` VARCHAR(45) NULL,
  `congnitivas` VARCHAR(45) NULL,
  `comportamentais` VARCHAR(45) NULL,
  `disciplina_grade_id_disciplina_grade` INT NOT NULL,
  PRIMARY KEY (`iddisciplina`),
  INDEX `fk_disciplina_disciplina_grade1_idx` (`disciplina_grade_id_disciplina_grade` ASC),
  CONSTRAINT `fk_disciplina_disciplina_grade1`
    FOREIGN KEY (`disciplina_grade_id_disciplina_grade`)
    REFERENCES `sistema_academico`.`disciplina_grade` (`id_disciplina_grade`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_academico`.`professor`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistema_academico`.`professor` (
  `id_Pro_Matricula` INT NOT NULL,
  `nome_pro` VARCHAR(200) NOT NULL,
  `CPF_Pro` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`id_Pro_Matricula`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_academico`.`avaliacao`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistema_academico`.`avaliacao` (
  `idavaliacao` INT NOT NULL,
  `nota` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`idavaliacao`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_academico`.`turma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistema_academico`.`turma` (
  `idturma` INT NOT NULL,
  `currso` VARCHAR(45) NULL,
  `disciplina` VARCHAR(45) NOT NULL,
  `horario` VARCHAR(45) NOT NULL,
  `sala` VARCHAR(45) NOT NULL,
  `recursos_necessarios` VARCHAR(45) NOT NULL,
  `professor_matricula` INT NOT NULL,
  `avaliacao_idavaliacao` INT NOT NULL,
  PRIMARY KEY (`idturma`),
  INDEX `fk_turma_professor1_idx` (`professor_matricula` ASC),
  INDEX `fk_turma_avaliacao1_idx` (`avaliacao_idavaliacao` ASC),
  CONSTRAINT `fk_turma_professor1`
    FOREIGN KEY (`professor_matricula`)
    REFERENCES `sistema_academico`.`professor` (`id_Pro_Matricula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_turma_avaliacao1`
    FOREIGN KEY (`avaliacao_idavaliacao`)
    REFERENCES `sistema_academico`.`avaliacao` (`idavaliacao`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_academico`.`contato`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistema_academico`.`contato` (
  `idcontato` INT NOT NULL,
  `celular` VARCHAR(45) NULL,
  `fixo` VARCHAR(45) NULL,
  `aluno_matricula` INT NOT NULL,
  PRIMARY KEY (`idcontato`),
  INDEX `fk_contato_aluno1_idx` (`aluno_matricula` ASC),
  CONSTRAINT `fk_contato_aluno1`
    FOREIGN KEY (`aluno_matricula`)
    REFERENCES `sistema_academico`.`aluno` (`matricula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_academico`.`disciplina_has_turma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistema_academico`.`disciplina_has_turma` (
  `disciplina_iddisciplina` INT NOT NULL,
  `turma_idturma` INT NOT NULL,
  PRIMARY KEY (`disciplina_iddisciplina`, `turma_idturma`),
  INDEX `fk_disciplina_has_turma_turma1_idx` (`turma_idturma` ASC) ,
  INDEX `fk_disciplina_has_turma_disciplina1_idx` (`disciplina_iddisciplina` ASC),
  CONSTRAINT `fk_disciplina_has_turma_disciplina1`
    FOREIGN KEY (`disciplina_iddisciplina`)
    REFERENCES `sistema_academico`.`disciplina` (`iddisciplina`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_disciplina_has_turma_turma1`
    FOREIGN KEY (`turma_idturma`)
    REFERENCES `sistema_academico`.`turma` (`idturma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_academico`.`turma_has_aluno`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistema_academico`.`turma_has_aluno` (
  `turma_idturma` INT NOT NULL,
  `aluno_matricula` INT NOT NULL,
  PRIMARY KEY (`turma_idturma`, `aluno_matricula`),
  INDEX `fk_turma_has_aluno_aluno1_idx` (`aluno_matricula` ASC),
  INDEX `fk_turma_has_aluno_turma1_idx` (`turma_idturma` ASC),
  CONSTRAINT `fk_turma_has_aluno_turma1`
    FOREIGN KEY (`turma_idturma`)
    REFERENCES `sistema_academico`.`turma` (`idturma`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_turma_has_aluno_aluno1`
    FOREIGN KEY (`aluno_matricula`)
    REFERENCES `sistema_academico`.`aluno` (`matricula`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `sistema_academico`.`grade`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `sistema_academico`.`grade` (
  `idgrade` INT NOT NULL,
  `nome_grade` VARCHAR(45) NOT NULL,
  `data_inicio` DATE NOT NULL,
  `data_final` DATE NULL,
  `quant_cred_total` INT NULL,
  `quant_cred_obrig` INT NULL,
  `quant_cred_opt` INT NULL,
  `curso_idcurso` INT NOT NULL,
  `disciplina_grade_id_disciplina_grade` INT NOT NULL,
  PRIMARY KEY (`idgrade`),
  INDEX `fk_grade_curso1_idx` (`curso_idcurso` ASC),
  INDEX `fk_grade_disciplina_grade1_idx` (`disciplina_grade_id_disciplina_grade` ASC),
  CONSTRAINT `fk_grade_curso1`
    FOREIGN KEY (`curso_idcurso`)
    REFERENCES `sistema_academico`.`curso` (`idcurso`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_grade_disciplina_grade1`
    FOREIGN KEY (`disciplina_grade_id_disciplina_grade`)
    REFERENCES `sistema_academico`.`disciplina_grade` (`id_disciplina_grade`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

-- ok -- curso
INSERT INTO curso (`idcurso`,`nome_curso`,`centro`,`forma_ingresso`)
VALUES(1,'analise e desenvolvimento de sistema','centro cct','vestibular unifor');

INSERT INTO curso (`idcurso`,`nome_curso`,`centro`,`forma_ingresso`)
VALUES(2,'analise e desenvolvimento de sistema','centro cct','vestibular unifor');

INSERT INTO curso (`idcurso`,`nome_curso`,`centro`,`forma_ingresso`)
VALUES(3,'analise e desenvolvimento de sistema','centro cct','vestibular unifor');

INSERT INTO curso (`idcurso`,`nome_curso`,`centro`,`forma_ingresso`)
VALUES(4,'analise e desenvolvimento de sistema','centro cct','vestibular unifor');


-- ok --aluno
INSERT INTO aluno (`data_entrada`, `semestre`,`nome_aluno`,`cpf`,`rg`,`logradouro`,`numero`,`bairro`,`cidade`,`cep`,`uf`,`nome_responsavel`,`curso_idcurso`)
VALUES('2020/08/01','2020.2','joão','03410506546','123456789','rua amadeu','1212','dionisio torres','fortaleza','657999999','ce','maria eugenia',1);	

INSERT INTO aluno (`data_entrada`, `semestre`,`nome_aluno`,`cpf`,`rg`,`logradouro`,`numero`,`bairro`,`cidade`,`cep`,`uf`,`nome_responsavel`,`curso_idcurso`)
VALUES('2020/08/01','2020.2','célio','03411236546','185256789','rua crisanto','1015','dionisio torres','fortaleza','657984599','ce','raimundo',2);

INSERT INTO aluno (`data_entrada`, `semestre`,`nome_aluno`,`cpf`,`rg`,`logradouro`,`numero`,`bairro`,`cidade`,`cep`,`uf`,`nome_responsavel`,`curso_idcurso`)
VALUES('2020/08/01','2020.2','amanda','03410558546','123416789','rua do carmo','1282','centro','fortaleza','657999659','ce','maria eduarda',3);

INSERT INTO aluno (`data_entrada`, `semestre`,`nome_aluno`,`cpf`,`rg`,`logradouro`,`numero`,`bairro`,`cidade`,`cep`,`uf`,`nome_responsavel`,`curso_idcurso`)
VALUES('2020/08/01','2020.2','douglas','03498506546','145456789','rua c','1252','edson queiroz','fortaleza','657999479','ce','joana',4);





-- ok -- contato
INSERT INTO contato(`idcontato`,`celular`,`fixo`,`aluno_matricula`)
VALUES(1,'85987554455','85945104156',1);

INSERT INTO contato(`idcontato`,`celular`,`fixo`,`aluno_matricula`)
VALUES(2,'85987554456','32602222',1);

INSERT INTO contato(`idcontato`,`celular`,`fixo`,`aluno_matricula`)
VALUES(3,'85987554457','32605544',1);

INSERT INTO contato(`idcontato`,`celular`,`fixo`,`aluno_matricula`)
VALUES(4,'85987554452','32608899',1);


-- ok --disciplina_grade
INSERT INTO disciplina_grade(`id_disciplina_grade`,`disciplina_grade_oferta`)
VALUES(1,'s');

INSERT INTO disciplina_grade(`id_disciplina_grade`,`disciplina_grade_oferta`)
VALUES(2,'s');

INSERT INTO disciplina_grade(`id_disciplina_grade`,`disciplina_grade_oferta`)
VALUES(3,'s');

INSERT INTO disciplina_grade(`id_disciplina_grade`,`disciplina_grade_oferta`)
VALUES(4,'s');


-- OK -- DISCIPLINA
INSERT INTO disciplina(`iddisciplina`,`creditos`,`horas`,`responsavel`,`atitudinais`,`congnitivas`,`comportamentais`,`disciplina_grade_id_disciplina_grade`)
VALUES(1,4,200,'adroano','inicial','inicial','intermediario',1);

INSERT INTO disciplina(`iddisciplina`,`creditos`,`horas`,`responsavel`,`atitudinais`,`congnitivas`,`comportamentais`,`disciplina_grade_id_disciplina_grade`)
VALUES(2,4,200,'mario','intermediario','inicial','avançado',2);

INSERT INTO disciplina(`iddisciplina`,`creditos`,`horas`,`responsavel`,`atitudinais`,`congnitivas`,`comportamentais`,`disciplina_grade_id_disciplina_grade`)
VALUES(3,4,200,'adroano','avançado','inicial','avançado',3);

INSERT INTO disciplina(`iddisciplina`,`creditos`,`horas`,`responsavel`,`atitudinais`,`congnitivas`,`comportamentais`,`disciplina_grade_id_disciplina_grade`)
VALUES(4,4,200,'adroano','inicial','avançado','avançado',4);


-- grade --
INSERT INTO grade(`idgrade`,`nome_grade`,`data_inicio`,`data_final`,`quant_cred_total`,`quant_cred_obrig`,`quant_cred_opt`,`curso_idcurso`,`disciplina_grade_id_disciplina_grade`)
VALUES(1,'ADS-01','2020/01/02','2020/12/10',500,450,50,1,1);

INSERT INTO grade(`idgrade`,`nome_grade`,`data_inicio`,`data_final`,`quant_cred_total`,`quant_cred_obrig`,`quant_cred_opt`,`curso_idcurso`,`disciplina_grade_id_disciplina_grade`)
VALUES(2,'ADS-01','2020/01/02','2020/12/10',500,450,50,2,2);

INSERT INTO grade(`idgrade`,`nome_grade`,`data_inicio`,`data_final`,`quant_cred_total`,`quant_cred_obrig`,`quant_cred_opt`,`curso_idcurso`,`disciplina_grade_id_disciplina_grade`)
VALUES(3,'ADS-02','2020/01/02','2020/12/10',800,750,50,3,3);

INSERT INTO grade(`idgrade`,`nome_grade`,`data_inicio`,`data_final`,`quant_cred_total`,`quant_cred_obrig`,`quant_cred_opt`,`curso_idcurso`,`disciplina_grade_id_disciplina_grade`)
VALUES(4,'ADS-03','2020/01/02','2020/12/10',900,850,50,4,4);


-- OK -- avaliacao
INSERT INTO avaliacao(`idavaliacao`,`nota`)
VALUES(1,'10');

INSERT INTO avaliacao(`idavaliacao`,`nota`)
VALUES(2,'8');
INSERT INTO avaliacao(`idavaliacao`,`nota`)
VALUES(3,'5');
INSERT INTO avaliacao(`idavaliacao`,`nota`)
VALUES(4,'7');


-- OK -- PROFESSOR
INSERT INTO professor(`id_Pro_Matricula`,`nome_pro`,`CPF_PRO`)
VALUES(1,'andre','12345678925');

INSERT INTO professor(`id_Pro_Matricula`,`nome_pro`,`CPF_PRO`)
VALUES(2,'lara','12345678954');

INSERT INTO professor(`id_Pro_Matricula`,`nome_pro`,`CPF_PRO`)
VALUES(3,'nanda','12345238925');

INSERT INTO professor(`id_Pro_Matricula`,`nome_pro`,`CPF_PRO`)
VALUES(4,'flavia','12345458925');


-- OK -- TURMA
INSERT INTO turma(`idturma`,`currso`,`disciplina`,`horario`,`sala`,`recursos_necessarios`,`professor_matricula`,`avaliacao_idavaliacao`)
VALUES(1,'engenharia da computação','logica de programação','21:00','virtual','internet',1,1);

INSERT INTO turma(`idturma`,`currso`,`disciplina`,`horario`,`sala`,`recursos_necessarios`,`professor_matricula`,`avaliacao_idavaliacao`)
VALUES(2,'analise e desenvolvimento de sistemas','programação orientada a objeto','21:00','virtual','internet',2,2);

INSERT INTO turma(`idturma`,`currso`,`disciplina`,`horario`,`sala`,`recursos_necessarios`,`professor_matricula`,`avaliacao_idavaliacao`)
VALUES(3,'ciências da computação','ambiente de dados','21:00','virtual','internet',3,3);

INSERT INTO turma(`idturma`,`currso`,`disciplina`,`horario`,`sala`,`recursos_necessarios`,`professor_matricula`,`avaliacao_idavaliacao`)
VALUES(4,'engenharia da computação','estrutura de dados','21:00','virtual','internet',4,4);


SELECT *
FROM aluno 
LEFT JOIN turma_has_aluno on turma_has_aluno.aluno_matricula = aluno.matricula  
LEFT JOIN turma on turma.idTurma = turma_has_aluno.turma_idTurma
LEFT JOIN disciplina_has_turma on disciplina_has_turma.turma_idturma = turma.idturma
LEFT JOIN disciplina on disciplina.iddisciplina = disciplina_has_turma.disciplina_iddisciplina
LEFT JOIN professor on professor.id_Pro_Matricula = turma.professor_matricula; 
